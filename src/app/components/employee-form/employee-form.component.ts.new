import { Component, OnInit, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  FormBuilder,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { EmployeeService } from '../../services/employee.service';
import { DepartmentService } from '../../services/department.service';
import { Employee, Department } from '../../models/employee.model';

@Component({
  selector: 'app-employee-form',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './employee-form.component.html',
  styles: [],
})
export class EmployeeFormComponent implements OnInit {
  employeeForm: FormGroup;
  departments = signal<Department[]>([]);
  isEditMode = signal(false);
  employeeId = signal<number | null>(null);

  constructor(
    private fb: FormBuilder,
    private employeeService: EmployeeService,
    private departmentService: DepartmentService,
    private router: Router,
    private route: ActivatedRoute
  ) {
    this.employeeForm = this.fb.group({
      firstName: ['', [Validators.required]],
      lastName: ['', [Validators.required]],
      email: ['', [Validators.required, Validators.email]],
      phone: [''],
      departmentId: [null, [Validators.required]],
      salary: [0, [Validators.required, Validators.min(0)]],
      hireDate: [new Date().toISOString().split('T')[0], [Validators.required]],
      isActive: [true],
    });
  }

  ngOnInit(): void {
    this.loadDepartments();
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      this.isEditMode.set(true);
      this.employeeId.set(Number(id));
      this.loadEmployee(Number(id));
    }
  }

  loadEmployee(id: number): void {
    this.employeeService.getEmployee(id).subscribe({
      next: (employee) => {
        this.employeeForm.patchValue({
          ...employee,
          hireDate: new Date(employee.hireDate).toISOString().split('T')[0],
        });
      },
      error: (error) => {
        console.error('Error loading employee:', error);
      },
    });
  }

  loadDepartments(): void {
    this.departmentService.getDepartments().subscribe({
      next: (departments) => {
        this.departments.set(departments);
      },
      error: (error) => {
        console.error('Error loading departments:', error);
      },
    });
  }

  onSubmit(): void {
    if (this.employeeForm.valid) {
      const employee: Employee = {
        ...this.employeeForm.value,
        employeeId: this.isEditMode() ? this.employeeId() : undefined,
      };

      if (this.isEditMode()) {
        this.employeeService.updateEmployee(this.employeeId()!, employee).subscribe({
          next: () => {
            this.router.navigate(['/employees']);
          },
          error: (error) => {
            console.error('Error updating employee:', error);
          },
        });
      } else {
        this.employeeService.createEmployee(employee).subscribe({
          next: () => {
            this.router.navigate(['/employees']);
          },
          error: (error) => {
            console.error('Error creating employee:', error);
          },
        });
      }
    }
  }

  navigateToEmployees(): void {
    this.router.navigate(['/employees']);
  }
}
