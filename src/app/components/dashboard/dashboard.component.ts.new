import { Component, OnInit, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { EmployeeService } from '../../services/employee.service';
import { DepartmentService } from '../../services/department.service';
import { AuthService } from '../../services/auth.service';
import { Employee, Department } from '../../models/employee.model';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './dashboard.component.html',
  styles: [],
})
export class DashboardComponent implements OnInit {
  stats = signal<any>({});
  currentUser = signal<any>(null);

  constructor(
    private employeeService: EmployeeService,
    private departmentService: DepartmentService,
    private authService: AuthService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.loadStats();
    this.currentUser.set(this.authService.currentUser());
  }

  loadStats(): void {
    this.employeeService.getEmployees().subscribe({
      next: (employees) => {
        this.departmentService.getDepartments().subscribe({
          next: (departments) => {
            const stats = {
              totalEmployees: employees.length,
              totalDepartments: departments.length,
              activeEmployees: employees.filter((emp) => emp.isActive).length,
              averageSalary:
                employees.length > 0
                  ? Math.round(
                      employees.reduce((sum, emp) => sum + emp.salary, 0) /
                        employees.length
                    )
                  : 0,
              departmentBreakdown: departments.map((dept) => ({
                name: dept.departmentName,
                count: employees.filter((emp) => emp.departmentId === dept.departmentId)
                  .length,
              })),
            };
            this.stats.set(stats);
          },
          error: (error) => {
            console.error('Error loading departments:', error);
            this.stats.set({ error: 'Failed to load statistics' });
          },
        });
      },
      error: (error) => {
        console.error('Error loading employees:', error);
        this.stats.set({ error: 'Failed to load statistics' });
      },
    });
  }

  logout(): void {
    this.authService.logout();
    this.router.navigate(['/login']);
  }

  navigateToEmployees(): void {
    this.router.navigate(['/employees']);
  }

  navigateToDepartments(): void {
    this.router.navigate(['/departments']);
  }
}
