import { Component, OnInit, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { DepartmentService } from '../../services/department.service';
import { Department } from '../../models/employee.model';

@Component({
  selector: 'app-department-list',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './department-list.component.html',
  styles: [],
})
export class DepartmentListComponent implements OnInit {
  departments = signal<Department[]>([]);
  showForm = signal(false);
  editingDepartment = signal<Department | null>(null);
  newDepartment: Department = {
    departmentName: '',
    description: '',
  };

  constructor(
    private departmentService: DepartmentService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.loadDepartments();
  }

  loadDepartments(): void {
    this.departmentService.getDepartments().subscribe({
      next: (departments) => {
        this.departments.set(departments);
      },
      error: (error) => {
        console.error('Error loading departments:', error);
      },
    });
  }

  showAddForm(): void {
    this.editingDepartment.set(null);
    this.newDepartment = {
      departmentName: '',
      description: '',
    };
    this.showForm.set(true);
  }

  showEditForm(department: Department): void {
    this.editingDepartment.set(department);
    this.newDepartment = { ...department };
    this.showForm.set(true);
  }

  hideForm(): void {
    this.showForm.set(false);
    this.editingDepartment.set(null);
  }

  onSubmit(): void {
    if (!this.newDepartment.departmentName.trim()) {
      return;
    }

    if (this.editingDepartment()) {
      const updatedDepartment = {
        ...this.editingDepartment(),
        ...this.newDepartment,
      };
      this.departmentService
        .updateDepartment(updatedDepartment.departmentId!, updatedDepartment)
        .subscribe({
          next: () => {
            this.loadDepartments();
            this.hideForm();
          },
          error: (error) => {
            console.error('Error updating department:', error);
          },
        });
    } else {
      this.departmentService.createDepartment(this.newDepartment).subscribe({
        next: () => {
          this.loadDepartments();
          this.hideForm();
        },
        error: (error) => {
          console.error('Error creating department:', error);
        },
      });
    }
  }

  deleteDepartment(id: number): void {
    if (confirm('Are you sure you want to delete this department?')) {
      this.departmentService.deleteDepartment(id).subscribe({
        next: () => {
          this.loadDepartments();
        },
        error: (error) => {
          console.error('Error deleting department:', error);
        },
      });
    }
  }

  navigateToDashboard(): void {
    this.router.navigate(['/dashboard']);
  }
}
